{"version":3,"sources":["components/LabelList/Label/EditLabel/EditLabel.js","components/LabelList/Label/Label.js","components/LabelList/LabelList.js","components/AddLabel/AddLabel.js","ui/AddButton/AddButton.js","container/App.js","serviceWorker.js","index.js"],"names":["EditLabel","state","displayColorPicker","labelColor","labelName","handleColorChange","hex","setState","handleColorPicker","handleLabel","event","target","value","this","props","swatchSelected","backgroundColor","width","height","className","autoComplete","type","placeholder","onChange","style","onClick","position","zIndex","handleClose","onChangeComplete","color","edit","id","Component","Label","useState","showEditLabel","labelState","setShowEditLabel","LabelList","labelList","map","label","key","AddLabel","add","AddButton","click","App","Math","random","showAddLabel","showAddHandler","addHandler","newLabel","updateLabelList","concat","editHandler","labelIndex","findIndex","l","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.895a15e2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { TwitterPicker } from 'react-color';\r\n\r\nclass EditLabel extends Component{\r\n    state = {\r\n        displayColorPicker:false,\r\n        labelColor: '',\r\n        labelName: ''\r\n    }\r\n    componentDidMount(){\r\n        this.setState({\r\n            labelColor: this.props.labelColor,\r\n            labelName: this.props.labelName\r\n        })\r\n    }\r\n    handleColorChange = ({hex}) =>{\r\n        this.setState({\r\n            labelColor: hex,\r\n            //displayColorPicker:false\r\n        });\r\n    }\r\n    handleColorPicker = () =>{\r\n        this.setState({displayColorPicker : !this.state.displayColorPicker})\r\n    }\r\n    handleLabel = (event) =>{\r\n        this.setState({labelName:event.target.value});\r\n    }\r\n    render(){\r\n        const popover = {\r\n            position: 'absolute',\r\n            zIndex: '2',\r\n        }\r\n        const swatchSelected = {\r\n            backgroundColor: this.state.labelColor,\r\n            width: '40px',\r\n            height: '40px'\r\n        }\r\n    return(\r\n        <div className=\"row flex-column px-3\">\r\n            <form autoComplete=\"off\">\r\n                <div className=\"form-row\">\r\n                    <div className=\"col\">\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Enter Label\" value={this.state.labelName} onChange={this.handleLabel}/>\r\n                    </div>\r\n                    <div className=\"col-auto\">\r\n                        <button type=\"button\" style={swatchSelected} onClick={this.handleColorPicker} className=\"btn shadow\">{this.state.labelColor ? '':<i className=\"fa fa-eyedropper\"></i>}</button>\r\n                        { this.state.displayColorPicker ? <div style={ popover }>\r\n                            <div onClick={ this.handleClose }/>\r\n                            <TwitterPicker onChangeComplete={this.handleColorChange} color={ this.state.labelColor }/>\r\n                        </div> : null }\r\n                    </div>\r\n                    <div className=\"col-auto\">\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={()=>this.props.edit(this.state.labelName, this.state.labelColor ,this.props.id)}>Update</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n}\r\n\r\nexport default EditLabel;","import React,{useState} from 'react';\r\nimport EditLabel from './EditLabel/EditLabel';\r\n\r\nconst Label = ({labelName, labelColor, id, edit}) => {\r\n  const [labelState,setShowEditLabel] = useState({showEditLabel: false});\r\n  const showEditLabelHandler = () => {\r\n    setShowEditLabel({showEditLabel: true});\r\n  }\r\n  return (\r\n    <div className=\"list-group-item\">\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <span className=\"badge\" style={{backgroundColor: labelColor}}>{labelName}</span>\r\n        </div>\r\n        <div className=\"col-auto\">\r\n          <button type=\"button\" className=\"btn\" onClick={showEditLabelHandler}><i className=\"fa fa-pencil\"></i></button>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        {labelState.showEditLabel?<EditLabel labelName={labelName} labelColor={labelColor} id={id} edit={edit}></EditLabel>:null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Label;","import React from 'react';\r\nimport Label from './Label/Label';\r\n\r\nconst LabelList = ({edit, labelList}) => {\r\n    return(\r\n          <div className=\"list-group\">\r\n            {labelList.map(label => {\r\n                return (\r\n                  <Label {...label} key={label.labelName} edit={edit}/>\r\n                )\r\n            })} \r\n          </div>\r\n    );\r\n}\r\n\r\nexport default LabelList;","import React, { Component } from 'react';\r\nimport { TwitterPicker } from 'react-color';\r\n\r\nclass AddLabel extends Component{\r\n    state = {\r\n        displayColorPicker: false,\r\n        labelColor: '',\r\n        labelName: ''\r\n    }\r\n    handleColorChange = ({hex}) => {\r\n        this.setState({\r\n            labelColor: hex,\r\n            //displayColorPicker: false\r\n        });\r\n    }\r\n    handleColorPicker = () => {\r\n        this.setState({displayColorPicker: !this.state.displayColorPicker})\r\n    }\r\n    handleLabel = (event) => {\r\n        this.setState({labelName: event.target.value});\r\n    }\r\n    render(){\r\n        const popover = {\r\n            position: 'absolute',\r\n            zIndex: '2',\r\n        }\r\n        const swatchSelected = {\r\n            backgroundColor: this.state.labelColor,\r\n            width: '40px',\r\n            height: '40px'\r\n        }\r\n    return(\r\n        <div className=\"row flex-column px-3\">\r\n            <form autoComplete=\"off\">\r\n                <div className=\"form-row\">\r\n                    <div className=\"col\">\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Enter Label\" onChange={this.handleLabel}/>\r\n                    </div>\r\n                    <div className=\"col-auto\">\r\n                        <button type=\"button\" style={swatchSelected} onClick={this.handleColorPicker} className=\"btn shadow\">{this.state.labelColor ? '':<i className=\"fa fa-eyedropper\"></i>}</button>\r\n                        { this.state.displayColorPicker ? <div style={ popover }>\r\n                            <div onClick={ this.handleClose }/>\r\n                            <TwitterPicker onChangeComplete={this.handleColorChange} color={this.state.labelColor}/>\r\n                        </div> : null }\r\n                    </div>\r\n                    <div className=\"col-auto\">\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={()=>this.props.add(this.state.labelName,this.state.labelColor)}>Add</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n}\r\n\r\nexport default AddLabel;","import React from 'react';\r\n\r\nconst AddButton = (props) => {\r\n  return (\r\n    <div className=\"row justify-content-end\">\r\n      <div className=\"col-auto\">\r\n        <button type=\"button\" className=\"btn circular-red-button shadow-sm\" onClick={props.click}>\r\n          <i className=\"fa fa-plus fa-sm\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddButton;","import React,{Component} from 'react';\nimport LabelList from '../components/LabelList/LabelList';\nimport AddLabel from '../components/AddLabel/AddLabel';\nimport AddButton from '../ui/AddButton/AddButton';\n\nclass App extends Component{\n  state = {\n    labelList: [\n      {\n        labelName: 'Complete',\n        labelColor: '#00FF00',\n        id: Math.random()\n      },\n      {\n        labelName: 'Info',\n        labelColor: '#0000FF',\n        id: Math.random()\n      }\n    ],\n    showAddLabel: false\n  }\n  showAddHandler = () =>{\n    this.setState({showAddLabel: !this.state.showAddLabel});\n  }\n  addHandler = (labelName, labelColor) => {\n    const newLabel ={\n      labelName,\n      labelColor,\n      id:Math.random\n    }\n    this.setState({showAddLabel: false});\n    const labelList = [...this.state.labelList];\n    const updateLabelList = labelList.concat([newLabel]);\n    this.setState({labelList: updateLabelList});\n  }\n  editHandler = (labelName, labelColor, id) => {\n    const labelIndex = this.state.labelList.findIndex(l=>(l.id === id));\n    const label={labelName, labelColor};\n    const updateLabelList = [...this.state.labelList];\n    updateLabelList[labelIndex] = label;\n    this.setState({labelList:updateLabelList});\n  }\n  render (){\n    return(\n      <div className=\"container\">\n        <h3 className=\"p-2\">Stage Player</h3>\n        <div className=\"row\">\n          <div className=\"col-4\">\n            <LabelList {...this.state} edit={(labelName, labelColor, id) => this.editHandler(labelName, labelColor ,id)}></LabelList>\n            <AddButton click={this.showAddHandler}></AddButton>\n            {this.state.showAddLabel ? <AddLabel add={(labelName,labelColor) => this.addHandler(labelName,labelColor)}></AddLabel> : null}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}