{"version":3,"sources":["components/LabelList/LabelCard/EditLabel/EditLabel.js","ui/Label/Label.js","components/LabelList/LabelCard/LabelCard.js","components/LabelList/LabelList.js","components/AddLabel/AddLabel.js","ui/AddButton/AddButton.js","container/App.js","serviceWorker.js","index.js"],"names":["EditLabel","state","displayColorPicker","labelColor","labelName","labelColorValid","labelNameValid","labelColorTouched","labelNameTouched","formValid","handleColorChange","hex","setState","checkValidity","validateForm","handleColorPicker","handleLabel","event","updatedLabel","target","value","editHandler","props","edit","label","id","closeEdit","trim","this","swatchSelected","backgroundColor","width","height","inputClasses","push","buttonClasses","className","autoComplete","type","join","placeholder","onChange","style","onClick","position","zIndex","handleClose","onChangeComplete","color","disabled","Component","Label","showEdit","LabelCard","useState","showEditLabel","labelState","setShowEditLabel","LabelList","labelList","map","key","AddLabel","add","AddButton","click","App","Math","random","showAddLabel","showAddHandler","addHandler","newLabel","updateLabelList","concat","labelIndex","findIndex","l","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3ebca32.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { TwitterPicker } from 'react-color';\r\n\r\nclass EditLabel extends Component {\r\n    state = {\r\n        displayColorPicker: false,\r\n        labelColor: '',\r\n        labelName: '',\r\n        labelColorValid: false,\r\n        labelNameValid: false,\r\n        labelColorTouched: false,\r\n        labelNameTouched: false,\r\n        formValid: false\r\n    }\r\n    checkValidity(value) {\r\n        return value.trim() !== '';\r\n    }\r\n    validateForm() {\r\n        this.setState({ formValid: this.state.labelNameValid && this.state.labelColorValid });\r\n    }\r\n    componentDidMount() {\r\n        this.setState({\r\n            labelColor: this.props.label.labelColor,\r\n            labelName: this.props.label.labelName,\r\n            labelColorValid: true,\r\n            labelNameValid: true\r\n        })\r\n    }\r\n    handleColorChange = ({ hex }) => {\r\n        this.setState({\r\n            labelColor: hex,\r\n            labelColorValid: this.checkValidity(hex),\r\n            labelColorTouched: true,\r\n            displayColorPicker: false,\r\n        }, this.validateForm);\r\n\r\n    }\r\n    handleColorPicker = () => {\r\n        this.setState({ displayColorPicker: !this.state.displayColorPicker })\r\n    }\r\n    handleLabel = (event) => {\r\n        const updatedLabel = event.target.value;\r\n        this.setState({\r\n            labelName: updatedLabel,\r\n            labelNameValid: this.checkValidity(updatedLabel),\r\n            labelNameTouched: true\r\n        }, this.validateForm);\r\n    }\r\n    editHandler = () => {\r\n        this.props.edit(this.state.labelName, this.state.labelColor, this.props.label.id);\r\n        this.props.closeEdit();\r\n    }\r\n    render() {\r\n        const popover = {\r\n            position: 'absolute',\r\n            zIndex: '2',\r\n        }\r\n        const swatchSelected = {\r\n            backgroundColor: this.state.labelColor,\r\n            width: '40px',\r\n            height: '40px'\r\n        }\r\n        const inputClasses = ['form-control'];\r\n        if (!this.state.labelNameValid && this.state.labelNameTouched) {\r\n            inputClasses.push('is-invalid');\r\n        }\r\n        const buttonClasses = ['btn form-control shadow-sm text-primary'];\r\n        if (!this.state.labelColorValid && this.state.labelColorTouched) {\r\n            buttonClasses.push('is-invalid');\r\n        }\r\n        return (\r\n            <div className=\"row pt-3\">\r\n                <form autoComplete=\"off\">\r\n                    <div className=\"form-row\">\r\n                        <div className=\"form-group has-danger\">\r\n                            <div className=\"col\">\r\n                                <input type=\"text\" className={inputClasses.join(' ')} placeholder=\"Update Label\" value={this.state.labelName} onChange={this.handleLabel} />\r\n                                <div className=\"invalid-feedback\">Enter valid label</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group has-danger\">\r\n                            <div className=\"col-auto\">\r\n                                <button type=\"button\" style={swatchSelected} onClick={this.handleColorPicker} className={buttonClasses.join(' ')}>{this.state.labelColor ? '' : <i className=\"fa fa-eyedropper\"></i>}</button>\r\n                                {this.state.displayColorPicker ? <div style={popover}>\r\n                                    <div onClick={this.handleClose} />\r\n                                    <TwitterPicker onChangeComplete={this.handleColorChange} color={this.state.labelColor} />\r\n                                </div> : null}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <div className=\"col-auto\">\r\n                                <button type=\"button\" className=\"btn btn-primary\" disabled={!this.state.formValid} onClick={this.editHandler}>Update</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditLabel;","import React from 'react';\r\n\r\nconst Label = ({ label, showEdit }) => {\r\n\treturn (\r\n\t\t<div className=\"row\">\r\n\t\t\t<div className=\"col\">\r\n\t\t\t\t<h5><span className=\"badge badge-pill text-white\" style={{ backgroundColor: label.labelColor }}>{label.labelName}</span></h5>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"col-auto\">\r\n\t\t\t\t<button type=\"button\" className=\"btn shadow-sm text-primary\" onClick={showEdit}><i className=\"fa fa-pencil\"></i></button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Label;","import React, { useState } from 'react';\r\nimport EditLabel from './EditLabel/EditLabel';\r\nimport Label from '../../../ui/Label/Label'\r\n\r\nconst LabelCard = ({ labelName, labelColor, id, edit }) => {\r\n\tconst [labelState, setShowEditLabel] = useState({ showEditLabel: false });\r\n\tconst showEditLabelHandler = () => {\r\n\t\tsetShowEditLabel({ showEditLabel: !labelState.showEditLabel });\r\n\t}\r\n\tconst closeEditHandler = () => {\r\n\t\tsetShowEditLabel({ showEditLabel: false});\r\n\t}\r\n\treturn (\r\n\t\t<div className=\"list-group-item\">\r\n\t\t\t<Label label={{ labelName, labelColor }} showEdit={showEditLabelHandler} />\r\n\t\t\t{labelState.showEditLabel ? <EditLabel \r\n\t\t\tlabel={{ labelName, labelColor, id }} \r\n\t\t\tedit={edit} \r\n\t\t\tcloseEdit={closeEditHandler}/> : null}\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default LabelCard;","import React from 'react';\r\nimport LabelCard from './LabelCard/LabelCard';\r\n\r\nconst LabelList = ({ edit, labelList }) => {\r\n\treturn (\r\n\t\t<div className=\"list-group\">\r\n\t\t\t{labelList.map(label => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<LabelCard {...label} key={label.id} edit={edit} />\r\n\t\t\t\t)\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default LabelList;","import React, { Component } from 'react';\r\nimport { TwitterPicker } from 'react-color';\r\n\r\nclass AddLabel extends Component {\r\n    state = {\r\n        displayColorPicker: false,\r\n        labelColor: '',\r\n        labelName: '',\r\n        labelColorValid: false,\r\n        labelNameValid: false,\r\n        labelColorTouched: false,\r\n        labelNameTouched: false,\r\n        formValid: false\r\n    }\r\n    checkValidity(value) {\r\n        return value.trim() !== '';\r\n    }\r\n    validateForm() {\r\n        this.setState({ formValid: this.state.labelNameValid && this.state.labelColorValid });\r\n    }\r\n    handleColorChange = ({ hex }) => {\r\n        this.setState({\r\n            labelColor: hex,\r\n            labelColorValid: this.checkValidity(hex),\r\n            labelColorTouched: true,\r\n            displayColorPicker: false\r\n        }, this.validateForm);\r\n    }\r\n    handleColorPicker = () => {\r\n        this.setState({ displayColorPicker: !this.state.displayColorPicker })\r\n    }\r\n    handleLabel = (event) => {\r\n        const updatedLabel = event.target.value;\r\n        this.setState({\r\n            labelName: updatedLabel,\r\n            labelNameValid: this.checkValidity(updatedLabel),\r\n            labelNameTouched: true\r\n        }, this.validateForm);\r\n    }\r\n    render() {\r\n        const popover = {\r\n            position: 'absolute',\r\n            zIndex: '2',\r\n        }\r\n        const swatchSelected = {\r\n            backgroundColor: this.state.labelColor,\r\n            width: '40px',\r\n            height: '40px'\r\n        }\r\n        const inputClasses = ['form-control'];\r\n        if (!this.state.labelNameValid && this.state.labelNameTouched) {\r\n            inputClasses.push('is-invalid');\r\n        }\r\n        const buttonClasses = ['btn form-control shadow-sm text-primary'];\r\n        if (!this.state.labelColorValid && this.state.labelColorTouched) {\r\n            buttonClasses.push('is-invalid');\r\n        }\r\n        return (\r\n            <div>\r\n                <form autoComplete=\"off\" className=\"border border-info pt-3 rounded-sm\">\r\n                    <div className=\"form-row\">\r\n                        <div className=\"form-group has-danger\">\r\n                            <div className=\"col\">\r\n                                <input type=\"text\" className={inputClasses.join(' ')} placeholder=\"Enter Label\" onChange={this.handleLabel} />\r\n                                <div className=\"invalid-feedback\">Enter valid label</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group has-danger\">\r\n                            <div className=\"col-auto\">\r\n                                <button type=\"button\" style={swatchSelected} onClick={this.handleColorPicker} className={buttonClasses.join(' ')}>{this.state.labelColor ? '' : <i className=\"fa fa-eyedropper\"></i>}</button>\r\n                                {this.state.displayColorPicker ? <div style={popover}>\r\n                                    <div onClick={this.handleClose} />\r\n                                    <TwitterPicker onChangeComplete={this.handleColorChange} color={this.state.labelColor} />\r\n                                </div> : null}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <div className=\"col-auto\">\r\n                                <button type=\"button\" className=\"btn btn-primary\" disabled={!this.state.formValid} onClick={() => this.props.add(this.state.labelName, this.state.labelColor)}>Add</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddLabel;","import React from 'react';\r\n\r\nconst AddButton = (props) => {\r\n\treturn (\r\n\t\t<div className=\"row justify-content-end\">\r\n\t\t\t<div className=\"col-auto\">\r\n\t\t\t\t<button type=\"button\" className=\"btn circular-red-button shadow-sm\" onClick={props.click}>\r\n\t\t\t\t\t<i className=\"fa fa-plus fa-sm\"></i>\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default AddButton;","import React, { Component } from 'react';\nimport LabelList from '../components/LabelList/LabelList';\nimport AddLabel from '../components/AddLabel/AddLabel';\nimport AddButton from '../ui/AddButton/AddButton';\n\nclass App extends Component {\n\tstate = {\n\t\tlabelList: [\n\t\t\t{\n\t\t\t\tlabelName: 'Complete',\n\t\t\t\tlabelColor: '#00FF00',\n\t\t\t\tid: Math.random()\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabelName: 'Info',\n\t\t\t\tlabelColor: '#0000FF',\n\t\t\t\tid: Math.random()\n\t\t\t}\n\t\t],\n\t\tshowAddLabel: false\n\t}\n\tshowAddHandler = () => {\n\t\tthis.setState({ showAddLabel: !this.state.showAddLabel });\n\t}\n\taddHandler = (labelName, labelColor) => {\n\t\tconst newLabel = {\n\t\t\tlabelName,\n\t\t\tlabelColor,\n\t\t\tid: Math.random()\n\t\t}\n\t\tthis.setState({ showAddLabel: false });\n\t\tconst labelList = [...this.state.labelList];\n\t\tconst updateLabelList = labelList.concat([newLabel]);\n\t\tthis.setState({ labelList: updateLabelList });\n\t}\n\teditHandler = (labelName, labelColor, id) => {\n\t\tconst labelIndex = this.state.labelList.findIndex(l => (l.id === id));\n\t\tconst label = { labelName, labelColor, id };\n\t\tconst updateLabelList = [...this.state.labelList];\n\t\tupdateLabelList[labelIndex] = label;\n\t\tthis.setState({ labelList: updateLabelList });\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<h3 className=\"p-2\">Stage Player</h3>\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col col-sm-5\">\n\t\t\t\t\t\t<LabelList {...this.state} edit={(labelName, labelColor, id) => this.editHandler(labelName, labelColor, id)}></LabelList>\n\t\t\t\t\t\t<AddButton click={this.showAddHandler}></AddButton>\n\t\t\t\t\t\t{this.state.showAddLabel ? <AddLabel add={(labelName, labelColor) => this.addHandler(labelName, labelColor)}></AddLabel> : null}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}