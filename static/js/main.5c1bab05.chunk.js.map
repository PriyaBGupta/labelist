{"version":3,"sources":["components/LabelList/Label/EditLabel/EditLabel.js","components/LabelList/Label/Label.js","components/LabelList/LabelList.js","components/AddLabel/AddLabel.js","ui/AddButton/AddButton.js","container/App.js","serviceWorker.js","index.js"],"names":["EditLabel","state","displayColorPicker","labelColor","labelName","labelColorValid","labelNameValid","labelColorTouched","labelNameTouched","formValid","handleColorChange","hex","setState","checkValidity","validateForm","handleColorPicker","handleLabel","event","updatedLabel","target","value","trim","this","props","label","swatchSelected","backgroundColor","width","height","inputClasses","push","buttonClasses","className","autoComplete","type","join","placeholder","onChange","style","onClick","position","zIndex","handleClose","onChangeComplete","color","disabled","edit","id","Component","Label","useState","showEditLabel","labelState","setShowEditLabel","LabelList","labelList","map","key","AddLabel","add","AddButton","click","App","Math","random","showAddLabel","showAddHandler","addHandler","newLabel","updateLabelList","concat","editHandler","labelIndex","findIndex","l","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c1bab05.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { TwitterPicker } from 'react-color';\r\n\r\nclass EditLabel extends Component {\r\n    state = {\r\n        displayColorPicker: false,\r\n        labelColor: '',\r\n        labelName: '',\r\n        labelColorValid: false,\r\n        labelNameValid: false,\r\n        labelColorTouched: false,\r\n        labelNameTouched: false,\r\n        formValid: false\r\n    }\r\n    checkValidity(value) {\r\n        return value.trim() !== '';\r\n    }\r\n    validateForm() {\r\n        this.setState({ formValid: this.state.labelNameValid && this.state.labelColorValid });\r\n    }\r\n    componentDidMount() {\r\n        this.setState({\r\n            labelColor: this.props.label.labelColor,\r\n            labelName: this.props.label.labelName,\r\n            labelColorValid: true,\r\n            labelNameValid: true,\r\n        })\r\n    }\r\n    handleColorChange = ({ hex }) => {\r\n        this.setState({\r\n            labelColor: hex,\r\n            labelColorValid: this.checkValidity(hex),\r\n            labelColorTouched: true,\r\n            displayColorPicker: false\r\n        }, this.validateForm);\r\n\r\n    }\r\n    handleColorPicker = () => {\r\n        this.setState({ displayColorPicker: !this.state.displayColorPicker })\r\n    }\r\n    handleLabel = (event) => {\r\n        const updatedLabel = event.target.value;\r\n        this.setState({\r\n            labelName: updatedLabel,\r\n            labelNameValid: this.checkValidity(updatedLabel),\r\n            labelNameTouched: true\r\n        }, this.validateForm);\r\n    }\r\n    render() {\r\n        const popover = {\r\n            position: 'absolute',\r\n            zIndex: '2',\r\n        }\r\n        const swatchSelected = {\r\n            backgroundColor: this.state.labelColor,\r\n            width: '40px',\r\n            height: '40px'\r\n        }\r\n        const inputClasses = ['form-control'];\r\n        if (!this.state.labelNameValid && this.state.labelNameTouched) {\r\n            inputClasses.push('is-invalid');\r\n        }\r\n        const buttonClasses = ['btn form-control shadow-sm'];\r\n        if (!this.state.labelColorValid && this.state.labelColorTouched) {\r\n            buttonClasses.push('is-invalid');\r\n        }\r\n        return (\r\n            <div className=\"pt-3\">\r\n                <form autoComplete=\"off\">\r\n                    <div className=\"form-row\">\r\n                        <div className=\"form-group has-danger\">\r\n                            <div className=\"col\">\r\n                                <input type=\"text\" className={inputClasses.join(' ')} placeholder=\"Update Label\" value={this.state.labelName} onChange={this.handleLabel} />\r\n                                <div className=\"invalid-feedback\">Enter valid label</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group has-danger\">\r\n                            <div className=\"col-auto\">\r\n                                <button type=\"button\" style={swatchSelected} onClick={this.handleColorPicker} className={buttonClasses.join(' ')}>{this.state.labelColor ? '' : <i className=\"fa fa-eyedropper\"></i>}</button>\r\n                                {this.state.displayColorPicker ? <div style={popover}>\r\n                                    <div onClick={this.handleClose} />\r\n                                    <TwitterPicker onChangeComplete={this.handleColorChange} color={this.state.labelColor} />\r\n                                </div> : null}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-auto\">\r\n                            <button type=\"button\" className=\"btn btn-primary\" disabled={!this.state.formValid} onClick={() => this.props.edit(this.state.labelName, this.state.labelColor, this.props.label.id)}>Update</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditLabel;","import React,{useState} from 'react';\r\nimport EditLabel from './EditLabel/EditLabel';\r\n\r\nconst Label = ({labelName, labelColor, id, edit}) => {\r\n  const [labelState,setShowEditLabel] = useState({showEditLabel: false});\r\n  const showEditLabelHandler = () => {\r\n    setShowEditLabel({showEditLabel: true});\r\n  }\r\n  return (\r\n    <div className=\"list-group-item\">\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <span className=\"badge text-white\" style={{backgroundColor: labelColor}}>{labelName}</span>\r\n        </div>\r\n        <div className=\"col-auto\">\r\n          <button type=\"button\" className=\"btn shadow-sm\" onClick={showEditLabelHandler}><i className=\"fa fa-pencil\"></i></button>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        {labelState.showEditLabel ? <EditLabel label={{labelName, labelColor, id}} edit={edit}></EditLabel>:null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Label;","import React from 'react';\r\nimport Label from './Label/Label';\r\n\r\nconst LabelList = ({edit, labelList}) => {\r\n    return(\r\n          <div className=\"list-group\">\r\n            {labelList.map(label => {\r\n                return (\r\n                  <Label {...label} key={label.labelName} edit={edit}/>\r\n                )\r\n            })} \r\n          </div>\r\n    );\r\n}\r\n\r\nexport default LabelList;","import React, { Component } from 'react';\r\nimport { TwitterPicker } from 'react-color';\r\n\r\nclass AddLabel extends Component {\r\n    state = {\r\n        displayColorPicker: false,\r\n        labelColor: '',\r\n        labelName: '',\r\n        labelColorValid: false,\r\n        labelNameValid: false,\r\n        labelColorTouched: false,\r\n        labelNameTouched: false,\r\n        formValid: false\r\n    }\r\n    checkValidity(value) {\r\n        return value.trim() !== '';\r\n    }\r\n    validateForm() {\r\n        this.setState({ formValid: this.state.labelNameValid && this.state.labelColorValid });\r\n    }\r\n    handleColorChange = ({ hex }) => {\r\n        this.setState({\r\n            labelColor: hex,\r\n            labelColorValid: this.checkValidity(hex),\r\n            labelColorTouched: true,\r\n            displayColorPicker: false\r\n        }, this.validateForm);\r\n    }\r\n    handleColorPicker = () => {\r\n        this.setState({ displayColorPicker: !this.state.displayColorPicker })\r\n    }\r\n    handleLabel = (event) => {\r\n        const updatedLabel = event.target.value;\r\n        this.setState({\r\n            labelName: updatedLabel,\r\n            labelNameValid: this.checkValidity(updatedLabel),\r\n            labelNameTouched: true\r\n        }, this.validateForm);\r\n    }\r\n    render() {\r\n        const popover = {\r\n            position: 'absolute',\r\n            zIndex: '2',\r\n        }\r\n        const swatchSelected = {\r\n            backgroundColor: this.state.labelColor,\r\n            width: '40px',\r\n            height: '40px'\r\n        }\r\n        const inputClasses = ['form-control'];\r\n        if (!this.state.labelNameValid && this.state.labelNameTouched) {\r\n            inputClasses.push('is-invalid');\r\n        }\r\n        const buttonClasses = ['btn form-control shadow-sm'];\r\n        if (!this.state.labelColorValid && this.state.labelColorTouched) {\r\n            buttonClasses.push('is-invalid');\r\n        }\r\n        return (\r\n            <div>\r\n                <form autoComplete=\"off\" className=\"border border-info pt-3 rounded-sm\">\r\n                    <div className=\"form-row\">\r\n                        <div className=\"form-group has-danger\">\r\n                            <div className=\"col\">\r\n                                <input type=\"text\" className={inputClasses.join(' ')} placeholder=\"Enter Label\" onChange={this.handleLabel} />\r\n                                <div className=\"invalid-feedback\">Enter valid label</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group has-danger\">\r\n                            <div className=\"col-auto\">\r\n                                <button type=\"button\" style={swatchSelected} onClick={this.handleColorPicker} className={buttonClasses.join(' ')}>{this.state.labelColor ? '' : <i className=\"fa fa-eyedropper\"></i>}</button>\r\n                                {this.state.displayColorPicker ? <div style={popover}>\r\n                                    <div onClick={this.handleClose} />\r\n                                    <TwitterPicker onChangeComplete={this.handleColorChange} color={this.state.labelColor} />\r\n                                </div> : null}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <div className=\"col-auto\">\r\n                                <button type=\"button\" className=\"btn btn-primary\" disabled={!this.state.formValid} onClick={() => this.props.add(this.state.labelName, this.state.labelColor)}>Add</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddLabel;","import React from 'react';\r\n\r\nconst AddButton = (props) => {\r\n  return (\r\n    <div className=\"row justify-content-end\">\r\n      <div className=\"col-auto\">\r\n        <button type=\"button\" className=\"btn circular-red-button shadow-sm\" onClick={props.click}>\r\n          <i className=\"fa fa-plus fa-sm\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddButton;","import React,{Component} from 'react';\nimport LabelList from '../components/LabelList/LabelList';\nimport AddLabel from '../components/AddLabel/AddLabel';\nimport AddButton from '../ui/AddButton/AddButton';\n\nclass App extends Component{\n  state = {\n    labelList: [\n      {\n        labelName: 'Complete',\n        labelColor: '#00FF00',\n        id: Math.random()\n      },\n      {\n        labelName: 'Info',\n        labelColor: '#0000FF',\n        id: Math.random()\n      }\n    ],\n    showAddLabel: false\n  }\n  showAddHandler = () =>{\n    this.setState({showAddLabel: !this.state.showAddLabel});\n  }\n  addHandler = (labelName, labelColor) => {\n    const newLabel ={\n      labelName,\n      labelColor,\n      id:Math.random\n    }\n    this.setState({showAddLabel: false});\n    const labelList = [...this.state.labelList];\n    const updateLabelList = labelList.concat([newLabel]);\n    this.setState({labelList: updateLabelList});\n  }\n  editHandler = (labelName, labelColor, id) => {\n    const labelIndex = this.state.labelList.findIndex(l=>(l.id === id));\n    const label={labelName, labelColor};\n    const updateLabelList = [...this.state.labelList];\n    updateLabelList[labelIndex] = label;\n    this.setState({labelList:updateLabelList});\n  }\n  render (){\n    return(\n      <div className=\"container\">\n        <h3 className=\"p-2\">Stage Player</h3>\n        <div className=\"row\">\n          <div className=\"col-5\">\n            <LabelList {...this.state} edit={(labelName, labelColor, id) => this.editHandler(labelName, labelColor ,id)}></LabelList>\n            <AddButton click={this.showAddHandler}></AddButton>\n            {this.state.showAddLabel ? <AddLabel add={(labelName,labelColor) => this.addHandler(labelName,labelColor)}></AddLabel> : null}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}